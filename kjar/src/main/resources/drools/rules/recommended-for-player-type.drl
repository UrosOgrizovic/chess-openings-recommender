package drools.rules;

import com.cor.backend.model.dto.PlayerDTO;
import com.cor.backend.model.ChessBook;
import com.cor.backend.model.ChessGame;
import com.cor.backend.model.ChessOpening;
import com.cor.backend.model.Recommended;
import com.cor.backend.service.RecommendedService;
import com.cor.backend.model.enums.PlayerDifficulty;
import java.util.ArrayList;

global java.util.ArrayList allChessBooks;
global java.util.ArrayList allChessGames;
global java.util.ArrayList allChessOpenings;

agenda-group "recommended-for-player-type"

query getBooksForTypeAndDifficulty(List $books, PlayerType $bookType, PlayerDifficulty $bookDifficulty)
    $books:= List() from accumulate($cb: ChessBook(bookType == $bookType, bookDifficulty == $bookDifficulty) from allChessBooks,
        collectList($cb)
    )
end

query getGamesForType(List $games, PlayerType $gameType)
    $games:= List() from accumulate($cg: ChessGame(gameType == $gameType) from allChessGames,
        collectList($cg)
    )
end

query getOpeningsForType(List $openings, PlayerType $openingType)
    $openings:= List() from accumulate($co: ChessOpening(openingType == $openingType) from allChessOpenings,
        collectList($co)
    )
end

rule "Set beginner aggressive recommended"
    no-loop
    when
        $pdto: PlayerDTO(playerType == PlayerType.AGGRESSIVE && playerDifficulty == PlayerDifficulty.BEGINNER);
        $recommendedService: RecommendedService();
        getBooksForTypeAndDifficulty($books, PlayerType.AGGRESSIVE, PlayerDifficulty.BEGINNER;)
        getGamesForType($games, PlayerType.AGGRESSIVE;)
        getOpeningsForType($openings, PlayerType.AGGRESSIVE;)
        $r: Recommended()
    then
        $r.setGames($games);
        $r.setChessBooks($books);
        $r.setChessOpenings($openings);
        $pdto.setRecommended($r);
        update($pdto);
end

rule "Set beginner tactical recommended"
    no-loop
    when
        $pdto: PlayerDTO(playerType == PlayerType.TACTICAL && playerDifficulty == PlayerDifficulty.BEGINNER);
        $recommendedService: RecommendedService();
        getBooksForTypeAndDifficulty($books, PlayerType.TACTICAL, PlayerDifficulty.BEGINNER;)
        getGamesForType($games, PlayerType.TACTICAL;)
        getOpeningsForType($openings, PlayerType.TACTICAL;)
        $r: Recommended()
    then
        $r.setGames($games);
        $r.setChessBooks($books);
        $r.setChessOpenings($openings);
        $pdto.setRecommended($r);
        update($pdto);
end

rule "Set beginner defensive recommended"
    no-loop
    when
        $pdto: PlayerDTO(playerType == PlayerType.DEFENSIVE && playerDifficulty == PlayerDifficulty.BEGINNER);
        $recommendedService: RecommendedService();
        getBooksForTypeAndDifficulty($books, PlayerType.DEFENSIVE, PlayerDifficulty.BEGINNER;)
        getGamesForType($games, PlayerType.DEFENSIVE;)
        getOpeningsForType($openings, PlayerType.DEFENSIVE;)
        $r: Recommended()
    then
        $r.setGames($games);
        $r.setChessBooks($books);
        $r.setChessOpenings($openings);
        $pdto.setRecommended($r);
        update($pdto);
end

rule "Set beginner positional recommended"
    no-loop
    when
        $pdto: PlayerDTO(playerType == PlayerType.POSITIONAL && playerDifficulty == PlayerDifficulty.BEGINNER);
        $recommendedService: RecommendedService();
        getBooksForTypeAndDifficulty($books, PlayerType.POSITIONAL, PlayerDifficulty.BEGINNER;)
        getGamesForType($games, PlayerType.POSITIONAL;)
        getOpeningsForType($openings, PlayerType.POSITIONAL;)
        $r: Recommended()
    then
        $r.setGames($games);
        $r.setChessBooks($books);
        $r.setChessOpenings($openings);
        $pdto.setRecommended($r);
        update($pdto);
end

rule "Set intermediate aggressive recommended"
    no-loop
    when
        $pdto: PlayerDTO(playerType == PlayerType.AGGRESSIVE && playerDifficulty == PlayerDifficulty.INTERMEDIATE);
        $recommendedService: RecommendedService();
        getBooksForTypeAndDifficulty($books, PlayerType.AGGRESSIVE, PlayerDifficulty.INTERMEDIATE;)
        getGamesForType($games, PlayerType.AGGRESSIVE;)
        getOpeningsForType($openings, PlayerType.AGGRESSIVE;)
        $r: Recommended()
    then
        $r.setGames($games);
        $r.setChessBooks($books);
        $r.setChessOpenings($openings);
        $pdto.setRecommended($r);
        update($pdto);
end

rule "Set intermediate tactical recommended"
    no-loop
    when
        $pdto: PlayerDTO(playerType == PlayerType.TACTICAL && playerDifficulty == PlayerDifficulty.INTERMEDIATE);
        $recommendedService: RecommendedService();
        getBooksForTypeAndDifficulty($books, PlayerType.TACTICAL, PlayerDifficulty.INTERMEDIATE;)
        getGamesForType($games, PlayerType.TACTICAL;)
        getOpeningsForType($openings, PlayerType.TACTICAL;)
        $r: Recommended()
    then
        $r.setGames($games);
        $r.setChessBooks($books);
        $r.setChessOpenings($openings);
        $pdto.setRecommended($r);
        update($pdto);
end

rule "Set intermediate defensive recommended"
    no-loop
    when
        $pdto: PlayerDTO(playerType == PlayerType.DEFENSIVE && playerDifficulty == PlayerDifficulty.INTERMEDIATE);
        $recommendedService: RecommendedService();
        getBooksForTypeAndDifficulty($books, PlayerType.DEFENSIVE, PlayerDifficulty.INTERMEDIATE;)
        getGamesForType($games, PlayerType.DEFENSIVE;)
        getOpeningsForType($openings, PlayerType.DEFENSIVE;)
        $r: Recommended()
    then
        $r.setGames($games);
        $r.setChessBooks($books);
        $r.setChessOpenings($openings);
        $pdto.setRecommended($r);
        update($pdto);
end

rule "Set intermediate positional recommended"
    no-loop
    when
        $pdto: PlayerDTO(playerType == PlayerType.POSITIONAL && playerDifficulty == PlayerDifficulty.INTERMEDIATE);
        $recommendedService: RecommendedService();
        getBooksForTypeAndDifficulty($books, PlayerType.POSITIONAL, PlayerDifficulty.INTERMEDIATE;)
        getGamesForType($games, PlayerType.POSITIONAL;)
        getOpeningsForType($openings, PlayerType.POSITIONAL;)
        $r: Recommended()
    then
        $r.setGames($games);
        $r.setChessBooks($books);
        $r.setChessOpenings($openings);
        $pdto.setRecommended($r);
        update($pdto);
end

rule "Set advanced aggressive recommended"
    no-loop
    when
        $pdto: PlayerDTO(playerType == PlayerType.AGGRESSIVE && playerDifficulty == PlayerDifficulty.ADVANCED);
        $recommendedService: RecommendedService();
        getBooksForTypeAndDifficulty($books, PlayerType.AGGRESSIVE, PlayerDifficulty.ADVANCED;)
        getGamesForType($games, PlayerType.AGGRESSIVE;)
        getOpeningsForType($openings, PlayerType.AGGRESSIVE;)
        $r: Recommended()
    then
        $r.setGames($games);
        $r.setChessBooks($books);
        $r.setChessOpenings($openings);
        $pdto.setRecommended($r);
        update($pdto);
end

rule "Set advanced tactical recommended"
    no-loop
    when
        $pdto: PlayerDTO(playerType == PlayerType.TACTICAL && playerDifficulty == PlayerDifficulty.ADVANCED);
        $recommendedService: RecommendedService();
        getBooksForTypeAndDifficulty($books, PlayerType.TACTICAL, PlayerDifficulty.ADVANCED;)
        getGamesForType($games, PlayerType.TACTICAL;)
        getOpeningsForType($openings, PlayerType.TACTICAL;)
        $r: Recommended()
    then
        $r.setGames($games);
        $r.setChessBooks($books);
        $r.setChessOpenings($openings);
        $pdto.setRecommended($r);
        update($pdto);
end

rule "Set advanced defensive recommended"
    no-loop
    when
        $pdto: PlayerDTO(playerType == PlayerType.DEFENSIVE && playerDifficulty == PlayerDifficulty.ADVANCED);
        $recommendedService: RecommendedService();
        getBooksForTypeAndDifficulty($books, PlayerType.DEFENSIVE, PlayerDifficulty.ADVANCED;)
        getGamesForType($games, PlayerType.DEFENSIVE;)
        getOpeningsForType($openings, PlayerType.DEFENSIVE;)
        $r: Recommended()
    then
        $r.setGames($games);
        $r.setChessBooks($books);
        $r.setChessOpenings($openings);
        $pdto.setRecommended($r);
        update($pdto);
end

rule "Set advanced positional recommended"
    no-loop
    when
        $pdto: PlayerDTO(playerType == PlayerType.POSITIONAL && playerDifficulty == PlayerDifficulty.ADVANCED);
        $recommendedService: RecommendedService();
        getBooksForTypeAndDifficulty($books, PlayerType.POSITIONAL, PlayerDifficulty.ADVANCED;)
        getGamesForType($games, PlayerType.POSITIONAL;)
        getOpeningsForType($openings, PlayerType.POSITIONAL;)
        $r: Recommended()
    then
        $r.setGames($games);
        $r.setChessBooks($books);
        $r.setChessOpenings($openings);
        $pdto.setRecommended($r);
        update($pdto);
end